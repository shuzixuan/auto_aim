CMAKE_MINIMUM_REQUIRED(VERSION 3.12)
project(auto-aim)
SET(exe_name auto-aim)
set(CMAKE_CXX_STANDARD 20)

find_program(CCACHE_PROGRAM ccache)
if (CCACHE_PROGRAM)
    set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE "${CCACHE_PROGRAM}")
endif ()

add_compile_definitions(PROJECT_DIR="${PROJECT_SOURCE_DIR}")

add_compile_options(-Wall -Werror=return-type -Wno-unused-variable)
if (CMAKE_BUILD_TYPE STREQUAL Release)
    add_compile_options(-O3 -flto -march=native)
elseif (CMAKE_BUILD_TYPE STREQUAL RelWithDebInfo)
    add_compile_options(-O3 -flto -march=native -g)
elseif (CMAKE_BUILD_TYPE STREQUAL MinSizeRel)
    add_compile_options(-Os -flto -march=native)
else ()
    add_compile_options(-O0 -g)
endif ()

find_package(OpenCV REQUIRED)
find_package(Eigen3 REQUIRED)
find_package(CUDA REQUIRED)
include_directories(${OpenCV_INCLUDE_DIRS})
include_directories(${EIGEN3_INCLUDE_DIR})
include_directories(${CUDA_INCLUDE_DIRS})

add_executable(${exe_name} main.cpp)

include_directories(common)
include_directories(sensor)
include_directories(comm)
include_directories(detect)
include_directories(predict)

add_subdirectory(common)
add_subdirectory(comm)
add_subdirectory(detect)
add_subdirectory(predict)
add_subdirectory(sensor)

target_link_libraries(${exe_name} common)
target_link_libraries(${exe_name} comm)
target_link_libraries(${exe_name} detect)
target_link_libraries(${exe_name} predict)
target_link_libraries(${exe_name} sensor)
